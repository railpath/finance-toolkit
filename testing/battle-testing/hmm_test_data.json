{
  "metadata": {
    "description": "HMM Battle Testing - Deterministic Components",
    "version": "1.0.0",
    "created": "2025-10-17",
    "purpose": "Testing mathematical correctness of HMM algorithms with fixed parameters"
  },
  "test_cases": {
    "logSumExp": [
      {
        "test_name": "basic_log_sum_exp",
        "description": "Basic log-sum-exp calculation",
        "input": {
          "logValues": [0, 0, 0]
        },
        "expected": {
          "result": 1.0986122886681098
        }
      },
      {
        "test_name": "large_negative_values",
        "description": "Numerically challenging large negative values",
        "input": {
          "logValues": [-1000, -999, -1001]
        },
        "expected": {
          "result": -998.5931471805599
        }
      },
      {
        "test_name": "empty_array",
        "description": "Edge case: empty array",
        "input": {
          "logValues": []
        },
        "expected": {
          "result": "-Infinity"
        }
      }
    ],
    "normalizeRows": [
      {
        "test_name": "basic_normalization",
        "description": "Normalize 2x3 matrix rows",
        "input": {
          "matrix": [
            [1, 2, 3],
            [4, 5, 6]
          ]
        },
        "expected": {
          "result": [
            [0.16666666666666666, 0.3333333333333333, 0.5],
            [0.26666666666666666, 0.3333333333333333, 0.4]
          ]
        }
      },
      {
        "test_name": "zero_row",
        "description": "Handle zero row with uniform distribution",
        "input": {
          "matrix": [[0, 0, 0]]
        },
        "expected": {
          "result": [[0.3333333333333333, 0.3333333333333333, 0.3333333333333333]]
        }
      }
    ],
    "normalizeArray": [
      {
        "test_name": "basic_array_normalization",
        "description": "Normalize array to sum to 1",
        "input": {
          "array": [1, 2, 3, 4]
        },
        "expected": {
          "result": [0.1, 0.2, 0.3, 0.4]
        }
      }
    ],
    "gaussianPDF": [
      {
        "test_name": "standard_normal_at_zero",
        "description": "Standard normal PDF at x=0",
        "input": {
          "x": 0,
          "mean": 0,
          "variance": 1
        },
        "expected": {
          "result": 0.3989422804014327
        }
      },
      {
        "test_name": "shifted_gaussian",
        "description": "Gaussian with mean=1, var=0.5 at x=1",
        "input": {
          "x": 1,
          "mean": 1,
          "variance": 0.5
        },
        "expected": {
          "result": 0.5641895835477563
        }
      }
    ],
    "logGaussianPDF": [
      {
        "test_name": "log_standard_normal",
        "description": "Log of standard normal PDF at x=0",
        "input": {
          "x": 0,
          "mean": 0,
          "variance": 1
        },
        "expected": {
          "result": -0.9189385332046727
        }
      }
    ],
    "multivariateGaussianPDF": [
      {
        "test_name": "2d_standard_normal",
        "description": "2D standard normal at origin",
        "input": {
          "x": [0, 0],
          "means": [0, 0],
          "variances": [1, 1]
        },
        "expected": {
          "result": 0.15915494309189535
        }
      }
    ],
    "standardize": [
      {
        "test_name": "basic_standardization",
        "description": "Standardize to mean=0, std=1",
        "input": {
          "values": [1, 2, 3, 4, 5]
        },
        "expected": {
          "result": [-1.4142135623730951, -0.7071067811865476, 0, 0.7071067811865476, 1.4142135623730951]
        }
      },
      {
        "test_name": "constant_values",
        "description": "Constant values return zeros",
        "input": {
          "values": [5, 5, 5, 5]
        },
        "expected": {
          "result": [0, 0, 0, 0]
        }
      }
    ],
    "forwardAlgorithm": [
      {
        "test_name": "simple_2_state_hmm",
        "description": "Forward algorithm with 2 states, 3 observations",
        "input": {
          "observations": [
            [0.5],
            [1.0],
            [-0.5]
          ],
          "transitionMatrix": [
            [0.7, 0.3],
            [0.4, 0.6]
          ],
          "emissionParams": [
            {"means": [0], "variances": [1]},
            {"means": [1], "variances": [1]}
          ],
          "initialProbs": [0.6, 0.4]
        },
        "expected": {
          "alphaShape": [3, 2],
          "scalingFactorsLength": 3,
          "logLikelihoodRange": [-5, 0]
        }
      }
    ],
    "backwardAlgorithm": [
      {
        "test_name": "simple_2_state_hmm",
        "description": "Backward algorithm with 2 states, 3 observations",
        "input": {
          "observations": [
            [0.5],
            [1.0],
            [-0.5]
          ],
          "transitionMatrix": [
            [0.7, 0.3],
            [0.4, 0.6]
          ],
          "emissionParams": [
            {"means": [0], "variances": [1]},
            {"means": [1], "variances": [1]}
          ],
          "scalingFactors": [0.5, 0.6, 0.4]
        },
        "expected": {
          "betaShape": [3, 2]
        }
      }
    ],
    "viterbiAlgorithm": [
      {
        "test_name": "simple_2_state_hmm",
        "description": "Viterbi algorithm finds most likely path",
        "input": {
          "observations": [
            [0.5],
            [1.0],
            [-0.5]
          ],
          "transitionMatrix": [
            [0.7, 0.3],
            [0.4, 0.6]
          ],
          "emissionParams": [
            {"means": [0], "variances": [1]},
            {"means": [1], "variances": [1]}
          ],
          "initialProbs": [0.6, 0.4]
        },
        "expected": {
          "pathLength": 3,
          "pathValuesIn": [0, 1]
        }
      }
    ],
    "extractFeaturesDefault": [
      {
        "test_name": "basic_feature_extraction",
        "description": "Extract returns and volatility features",
        "input": {
          "prices": [100, 102, 105, 103, 107, 110, 108, 112, 115, 113, 118, 120, 122, 119, 125, 128, 126, 130, 133, 131, 136, 140, 138, 142, 145],
          "window": 5
        },
        "expected": {
          "featureShape": [20, 2],
          "featureStandardized": true
        }
      }
    ]
  }
}

